/* Exercise 5-1. As written, getint treats a + or - not followed by a digit as a 
 * valid representation of zero. Fix it to push such a character back on the input. */
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define SEP             "=====================================================\n"
#define BUFFER_SIZE     128
#define MAX_STRS        32

/* Function Prototypes */
int getint(char *pn);
int getch(void);
void ungetch(int c);

/* Global Variables */
int buffer[BUFFER_SIZE];
int buffer_p;

int main(void)
{
    char *strs[] = { "42", "-42", "420", "-420" };
    int strs_n = sizeof(strs) / sizeof(strs[0]);
    char    

    // Render UI
    printf("Exercise 5-1: getint\n");
    printf(SEP);
    for (int i = 0; i < 4; i++)
    {
        printf("strs[%d] = %s converted to: %d\n", i, strs[i], getint(strs[i]));
    }

    // for (int i = 0; i < strs_n; i++)
    // {
    //     printf("strs[%d] = %s converted to: %d\n", i, strs[i], getint(strs[i]));
    // }

    return (0);
}


/* getint_zero: get an integer */
int getint(char *pn)
{
    int c;
    int sign;
    int sign_found;

    *pn = 0;    /* Set pointer to the beginning of the string */
    while (isspace(c = getch()))    /* skip white space */
        ;
    
    if (!isdigit(c) && c != EOF && c != '+' && c != '-')
    {                   /* not a number */
        ungetch(c);     /* push character back into input stream */
        return (0);
    }

    sign = (c == '-') ? -1 : 1;                 /* set sign */
    if ((sign_found = (c == '+' || c == '-')))    /* mark sign as found */
        c = getch();


    if (!isdigit(c))
    {
        ungetch(c);
        if (sign_found)
            ungetch(c);
    }
    for (*pn = 0; isdigit(c); c = getch())
        *pn = *pn * 10 + (c - '0');     /* convert to integer */

    *pn *= sign;

    if (c != EOF)
        ungetch(c);

    return c;
}


/* getch: get a (possibly pushed back) character */
int getch(void)
{
    return ((buffer_p > 0) ? buffer[--buffer_p] : getchar());
}

/* ungetch: push a character back on the input */
void ungetch(int c)
{
    if (buffer_p >= BUFFER_SIZE)
        printf("ungetch error: too many characters\n");
    else
        buffer[buffer_p++] = c;
}
